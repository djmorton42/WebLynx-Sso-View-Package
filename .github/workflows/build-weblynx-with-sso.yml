name: Build WebLynx with SSO Views

on:
  workflow_dispatch:
    inputs:
      weblynx_version:
        description: "WebLynx version to use (leave empty for latest)"
        required: false
        default: ""
        type: string
      sso_version:
        description: "SSO View Package version to use (leave empty for latest)"
        required: false
        default: ""
        type: string

jobs:
  build-weblynx-with-sso:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # needed for creating releases

    steps:
      - name: Checkout SSO View Package
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest SSO View Package version
        id: get_sso_version
        run: |
          if [ -n "${{ github.event.inputs.sso_version }}" ]; then
            sso_version="${{ github.event.inputs.sso_version }}"
          else
            # Only get releases that start with 'v' (exclude integrated releases)
            sso_version=$(gh release list --repo ${{ github.repository }} --limit 50 --json tagName --jq '.[] | select(.tagName | startswith("v")) | .tagName' | head -1)
            sso_version=${sso_version#v}
          fi
          echo "Using SSO View Package version: $sso_version"
          echo "sso_version=$sso_version" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Get WebLynx version
        id: get_weblynx_version
        run: |
          if [ -n "${{ github.event.inputs.weblynx_version }}" ]; then
            weblynx_version="${{ github.event.inputs.weblynx_version }}"
          else
            weblynx_version=$(gh release list --repo djmorton42/WebLynx --limit 1 --json tagName --jq '.[0].tagName')
            weblynx_version=${weblynx_version#v}
          fi
          echo "Using WebLynx version: $weblynx_version"
          echo "weblynx_version=$weblynx_version" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download WebLynx release
        run: |
          weblynx_version=${{ steps.get_weblynx_version.outputs.weblynx_version }}
          echo "Downloading WebLynx v$weblynx_version..."
          
          # First, list available assets to see what's available
          echo "Available assets for v$weblynx_version:"
          gh release view "v$weblynx_version" --repo djmorton42/WebLynx --json assets --jq '.assets[].name'
          
          # Download only the Windows version for the specified version
          gh release download "v$weblynx_version" --repo djmorton42/WebLynx --pattern "*win*.zip" --dir ./weblynx-download
          
          # List what was downloaded
          echo "Downloaded files:"
          ls -la ./weblynx-download/
          
          # Extract the Windows zip file
          cd weblynx-download
          for zip_file in *win*.zip; do
            if [ -f "$zip_file" ]; then
              echo "Extracting $zip_file"
              unzip -q "$zip_file"
              echo "Contents after extraction:"
              ls -la
            fi
          done
          cd ..
          
          # Debug: Show the final weblynx-download structure
          echo "Final weblynx-download structure:"
          find ./weblynx-download -type f -name "*.exe" -o -name "*.dll" -o -name "*.json" -o -name "*.txt" | head -10
          echo "All directories in weblynx-download:"
          find ./weblynx-download -type d
          echo "Contents of weblynx-download after extraction:"
          ls -la ./weblynx-download/
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download SSO View Package
        run: |
          sso_version=${{ steps.get_sso_version.outputs.sso_version }}
          echo "Downloading SSO View Package v$sso_version..."
          
          # Download the SSO View Package release from the correct repository
          gh release download "v$sso_version" --repo ${{ github.repository }} --pattern "*.zip" --dir ./sso-download
          
          # Extract the SSO View Package
          cd sso-download
          unzip -q *.zip
          cd ..
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Integrate SSO Views into WebLynx
        run: |
          # Debug: Show what's in weblynx-download
          echo "Contents of weblynx-download:"
          ls -la ./weblynx-download/
          
          # Use weblynx-download directly since WebLynx files are extracted there
          weblynx_dir="./weblynx-download"
          
          echo "Using WebLynx directory: $weblynx_dir"
          echo "Contents of WebLynx directory:"
          ls -la "$weblynx_dir"
          
          # Remove the example view that comes with WebLynx
          if [ -d "$weblynx_dir/Views/example" ]; then
            echo "Removing example view directory"
            rm -rf "$weblynx_dir/Views/example"
          fi
          
          # Create Views directory if it doesn't exist
          mkdir -p "$weblynx_dir/Views"
          
          # Copy all SSO view packages to WebLynx Views directory
          # Dynamically copy all directories from sso-download (excluding files)
          for dir in ./sso-download/*/; do
            if [ -d "$dir" ]; then
              dirname=$(basename "$dir")
              echo "Copying view package: $dirname"
              cp -r "$dir" "$weblynx_dir/Views/"
            fi
          done
          
          # Copy VERSION.txt and README.md
          cp ./sso-download/VERSION.txt "$weblynx_dir/Views/" 2>/dev/null || echo "No VERSION.txt found"
          cp ./sso-download/README.md "$weblynx_dir/Views/" 2>/dev/null || echo "No README.md found"
          
          echo "Successfully integrated SSO views into WebLynx"
          echo "Final WebLynx directory contents:"
          ls -la "$weblynx_dir"

      - name: Generate Release Body
        id: generate_release_body
        run: |
          # Generate list of SSO views from the sso-download directory
          views_list=""
          for dir in ./sso-download/*/; do
            if [ -d "$dir" ]; then
              dirname=$(basename "$dir")
              # Skip non-view directories (like if there are any metadata files)
              if [ "$dirname" != "Views" ] && [ -f "$dir/template.html" ]; then
                if [ -z "$views_list" ]; then
                  views_list="  - $dirname"
                else
                  views_list="$views_list"$'\n'"  - $dirname"
                fi
              fi
            fi
          done
          
          # Generate the complete release body
          weblynx_version="${{ steps.get_weblynx_version.outputs.weblynx_version }}"
          sso_version="${{ steps.get_sso_version.outputs.sso_version }}"
          timestamp="${{ steps.create_package.outputs.timestamp }}"
          
          # Create the release body using echo statements instead of here-document
          {
            echo "## WebLynx with SSO Views Integration"
            echo ""
            echo "This release contains WebLynx $weblynx_version with SSO View Package $sso_version pre-integrated."
            echo ""
            echo "### What's Included"
            echo "- **WebLynx Application**: Complete WebLynx installation"
            echo "- **SSO Views**: All SSO view packages pre-installed"
            echo "$views_list"
            echo ""
            echo "### Installation"
            echo "1. Download the zip file"
            echo "2. Extract to your desired location"
            echo "3. Run \`WebLynx.exe\` to start the application"
            echo "4. The SSO views will be available in the Views menu"
            echo ""
            echo "### Build Information"
            echo "- **Build Date**: $timestamp"
            echo "- **WebLynx Version**: $weblynx_version"
            echo "- **SSO View Package Version**: $sso_version"
          } > release_body.md
          
          echo "Generated release body:"
          cat release_body.md
          
          # Set the release body as an output
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          cat release_body.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create integrated WebLynx package
        run: |
          weblynx_version=${{ steps.get_weblynx_version.outputs.weblynx_version }}
          sso_version=${{ steps.get_sso_version.outputs.sso_version }}
          timestamp=$(date -u +"%Y%m%d-%H%M%S")
          
          # Use the same weblynx_dir that was determined in the integration step
          weblynx_dir="./weblynx-download"
          
          # Create final zip package in the root directory with timestamp
          cd "$weblynx_dir"
          zip -r "../WebLynx-v${weblynx_version}-with-SSO-Views-v${sso_version}-${timestamp}.zip" . -x "*.zip"
          cd ..
          
          # Verify the file was created
          echo "Checking for created package:"
          ls -la "WebLynx-v${weblynx_version}-with-SSO-Views-v${sso_version}-${timestamp}.zip"
          
          echo "Created integrated package: WebLynx-v${weblynx_version}-with-SSO-Views-v${sso_version}-${timestamp}.zip"
          echo "package_name=WebLynx-v${weblynx_version}-with-SSO-Views-v${sso_version}-${timestamp}.zip" >> $GITHUB_OUTPUT
          echo "timestamp=${timestamp}" >> $GITHUB_OUTPUT
        id: create_package

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: weblynx-integrated-v${{ steps.get_weblynx_version.outputs.weblynx_version }}-sso-v${{ steps.get_sso_version.outputs.sso_version }}-${{ steps.create_package.outputs.timestamp }}
          name: WebLynx ${{ steps.get_weblynx_version.outputs.weblynx_version }} with SSO Views ${{ steps.get_sso_version.outputs.sso_version }}
          files: ${{ steps.create_package.outputs.package_name }}
          body: ${{ steps.generate_release_body.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **WebLynx Version**: ${{ steps.get_weblynx_version.outputs.weblynx_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SSO View Package Version**: ${{ steps.get_sso_version.outputs.sso_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integrated Package**: ${{ steps.create_package.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The integrated package has been uploaded as an artifact and is ready for download." >> $GITHUB_STEP_SUMMARY